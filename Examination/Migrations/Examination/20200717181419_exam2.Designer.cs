// <auto-generated />
using System;
using Examination.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Examination.Migrations.Examination
{
    [DbContext(typeof(ExaminationContext))]
    [Migration("20200717181419_exam2")]
    partial class exam2
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.6-servicing-10079")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Examination.Data.Answer", b =>
                {
                    b.Property<int?>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Nomi");

                    b.Property<int>("QuestionID");

                    b.Property<bool>("isTrue");

                    b.HasKey("ID");

                    b.HasIndex("QuestionID");

                    b.ToTable("Answers");
                });

            modelBuilder.Entity("Examination.Data.AnsweredQuesttions", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("AnswerID");

                    b.Property<int>("QuestionID");

                    b.Property<int>("UserExamsID");

                    b.HasKey("ID");

                    b.HasIndex("AnswerID");

                    b.HasIndex("QuestionID");

                    b.HasIndex("UserExamsID");

                    b.ToTable("AnsweredQuesttions");
                });

            modelBuilder.Entity("Examination.Data.Part", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Nomi");

                    b.Property<int>("PredmetID");

                    b.HasKey("ID");

                    b.HasIndex("PredmetID");

                    b.ToTable("Parts");
                });

            modelBuilder.Entity("Examination.Data.Predmet", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Nomi");

                    b.HasKey("ID");

                    b.ToTable("Predmets");
                });

            modelBuilder.Entity("Examination.Data.Question", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Nomi");

                    b.Property<int>("TestID");

                    b.HasKey("ID");

                    b.HasIndex("TestID");

                    b.ToTable("Questions");
                });

            modelBuilder.Entity("Examination.Data.Test", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description");

                    b.Property<string>("Nomi");

                    b.Property<int>("PartID");

                    b.Property<string>("UserID");

                    b.Property<bool>("isactive");

                    b.HasKey("ID");

                    b.HasIndex("PartID");

                    b.ToTable("Tests");
                });

            modelBuilder.Entity("Examination.Data.UserExams", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("TestID");

                    b.Property<string>("UserName");

                    b.HasKey("ID");

                    b.HasIndex("TestID");

                    b.ToTable("UserExams");
                });

            modelBuilder.Entity("Examination.Data.Answer", b =>
                {
                    b.HasOne("Examination.Data.Question", "Question")
                        .WithMany("Answers")
                        .HasForeignKey("QuestionID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Examination.Data.AnsweredQuesttions", b =>
                {
                    b.HasOne("Examination.Data.Answer", "Answer")
                        .WithMany()
                        .HasForeignKey("AnswerID");

                    b.HasOne("Examination.Data.Question", "Question")
                        .WithMany()
                        .HasForeignKey("QuestionID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Examination.Data.UserExams", "UserExams")
                        .WithMany("AnsweredQuesttions")
                        .HasForeignKey("UserExamsID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Examination.Data.Part", b =>
                {
                    b.HasOne("Examination.Data.Predmet", "Predmet")
                        .WithMany("Parts")
                        .HasForeignKey("PredmetID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Examination.Data.Question", b =>
                {
                    b.HasOne("Examination.Data.Test", "Test")
                        .WithMany("Questions")
                        .HasForeignKey("TestID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Examination.Data.Test", b =>
                {
                    b.HasOne("Examination.Data.Part", "Part")
                        .WithMany("Tests")
                        .HasForeignKey("PartID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Examination.Data.UserExams", b =>
                {
                    b.HasOne("Examination.Data.Test", "Test")
                        .WithMany("UserExams")
                        .HasForeignKey("TestID");
                });
#pragma warning restore 612, 618
        }
    }
}
